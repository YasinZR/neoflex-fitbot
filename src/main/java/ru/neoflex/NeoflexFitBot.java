package ru.neoflex;

import java.util.ArrayList;
import java.util.List;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.neoflex.config.BotConfig;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Component
public class NeoflexFitBot  extends TelegramLongPollingBot {
    private final BotConfig config;

    public NeoflexFitBot(BotConfig config) {
        this.config = config;
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getFrom().getFirstName();

            if (messageText.equals("/start")) {
                sendMainMenu(chatId, userName);
//                String reply = "–ü—Ä–∏–≤–µ—Ç, " + userName + "! üëã\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Å–ø–æ—Ä—Ç—É.\n" +
//                        "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ, –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–µ–µ!";
//                sendMessage(chatId, reply);
            }
        }
    }

    private void sendMainMenu(long chatId, String userName) {
        String text = "–ü—Ä–∏–≤–µ—Ç, " + userName + "! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Å–ø–æ—Ä—Ç—É. \n " +
                "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ, –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–µ–µ!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(InlineKeyboardButton.builder().text("üí™ –ü—Ä–∏–≤—ã—á–∫–∏").callbackData("habits").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üßÆ –ë–ñ–£").callbackData("bju").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üíß –í–æ–¥–∞").callbackData("water").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").callbackData("stats").build()));
        rows.add(List.of(InlineKeyboardButton.builder().text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏").callbackData("settings").build()));

        markup.setKeyboard(rows);

        SendMessage message = SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(text)
                .replyMarkup(markup)
                .build();

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage(String.valueOf(chatId), text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}