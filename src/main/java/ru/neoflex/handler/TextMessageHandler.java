package ru.neoflex.handler;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.neoflex.model.CalculatorProfile;
import ru.neoflex.model.enums.OnboardingStep;
import ru.neoflex.model.User;
import ru.neoflex.service.CalculatorService;
import ru.neoflex.service.OnboardingService;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import static ru.neoflex.util.BotResponseUtils.*;

@Component
@RequiredArgsConstructor
public class TextMessageHandler {

    private final OnboardingStepHandler onboardingStepHandler;
    private final OnboardingService onboardingService;
    private final MainMenuHandler mainMenuHandler;
    private final CalculatorService calculatorService;
    private final Map<Long, Boolean> calculatorModeUsers = new ConcurrentHashMap<>();


    public void handle(Update update) {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();
        String userName = update.getMessage().getFrom().getFirstName();

        if (messageText.equals("/start")) {
            handleStartCommand(chatId, userName);
            return;
        }

        if (messageText.equals("/calculator")) {
            calculatorModeUsers.put(chatId, true);
            onboardingService.startOnboarding(chatId); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥–∏
            sendTextWithKeyboard(chatId, "–î–∞–≤–∞–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏. –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", onboardingStepHandler.genderKeyboard());
            return;
        }

        User user = onboardingService.getUserByTelegramId(chatId);
        OnboardingStep step = user.getOnboardingStep();

        if (messageText.equals("/calories")) {
            CalculatorProfile profile = user.getCalculatorProfile();

            double calories = calculatorService.calculateStoredCalories(profile);
            sendText(chatId, "üî• –¢–≤–æ—è —Å—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: *" + (int) calories + "* –∫–∫–∞–ª");
            return;
        }

        if (step == OnboardingStep.CUSTOM_WEIGHT) {
            handleCustomWeight(chatId, messageText);
            return;
        }

        if (step == OnboardingStep.CUSTOM_HEIGHT) {
            handleCustomHeight(chatId, messageText);
            return;
        }

        if (step == OnboardingStep.GOAL) {
            onboardingService.saveGoal(chatId, messageText);

            if (calculatorModeUsers.getOrDefault(chatId, false)) {
                var profile = onboardingService.getUserByTelegramId(chatId).getCalculatorProfile();
                int calories = calculatorService.calculateCalories(
                        profile.getGender(),
                        profile.getAge(),
                        profile.getWeight(),
                        profile.getHeight(),
                        profile.getActivityLevel(),
                        profile.getGoal()
                );

                sendTextWithButtons(chatId,
                        "üî• –¢–≤–æ—è —Å—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: " + calories + " –∫–∫–∞–ª",
                        Map.of(
                                "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å", "SAVE_CALC_PROFILE",
                                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "CANCEL_CALC_PROFILE"
                        )
                );

                calculatorModeUsers.remove(chatId); // –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            } else {
                mainMenuHandler.showMenu(chatId); // –æ–±—ã—á–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω
            }
        }
    }




    private void handleStartCommand(long chatId, String userName) {
        onboardingService.startOnboarding(chatId);
        sendTextWithKeyboard(
                chatId,
                "–ü—Ä–∏–≤–µ—Ç, " + userName + "! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞—á–Ω—ë–º —Å –ø–æ–ª–∞:",
                onboardingStepHandler.genderKeyboard()
        );
    }

    private void handleCustomWeight(long chatId, String messageText) {
        try {
            onboardingService.saveWeight(chatId, messageText);
            onboardingService.saveOnboardingStep(chatId, OnboardingStep.HEIGHT);
            sendTextWithKeyboard(
                    chatId,
                    "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Ä–æ—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (175 —Å–º):",
                    onboardingStepHandler.heightKeyboard()
            );
        } catch (NumberFormatException e) {
            sendText(chatId,"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 73");
        }
    }

    private void handleCustomHeight(long chatId, String messageText) {
        try {
            onboardingService.saveHeight(chatId, messageText);
            onboardingService.saveOnboardingStep(chatId, OnboardingStep.ACTIVITY_LEVEL);
            sendTextWithKeyboard(
                    chatId,
                    "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                    onboardingStepHandler.activityLevelKeyboard()

            );
        } catch (NumberFormatException e) {
            sendText(chatId,"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 178");
        }
    }
}
