package ru.neoflex.handler;

import lombok.*;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.neoflex.model.NutritionEntry;
import ru.neoflex.model.User;
import ru.neoflex.service.NutritionService;
import ru.neoflex.service.OnboardingService;

import static ru.neoflex.util.BotResponseUtils.sendButtons;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;

import static ru.neoflex.util.BotResponseUtils.sendText;

@Component
@RequiredArgsConstructor
public class NutritionCommandHandler {

    private final NutritionService nutritionService;
    private final OnboardingService onboardingService;


    private final Map<Long, PartialMeal> mealBuffer = new ConcurrentHashMap<>();

    public void handleAddMeal(Update update) {
        long chatId = update.getMessage().getChatId();
        sendText(chatId, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–µ—Ä–µ–∫—É—Å):");
        mealBuffer.put(chatId, new PartialMeal());
    }

    public void handleTextStep(Update update) {
        long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();

        PartialMeal buffer = mealBuffer.get(chatId);
        if (buffer == null) return;

        User user = onboardingService.getUserByTelegramId(chatId);

        switch (buffer.getCurrentStep()) {
            case TYPE -> {
                buffer.setMealType(text);
                buffer.setCurrentStep(PartialMeal.InputStep.PROTEIN);
                sendText(chatId, "–°–∫–æ–ª—å–∫–æ –±–µ–ª–∫–æ–≤ (–≥)?");
            }
            case PROTEIN -> {
                try {
                    buffer.setProtein(Double.parseDouble(text));
                    buffer.setCurrentStep(PartialMeal.InputStep.FAT);
                    sendText(chatId, "–°–∫–æ–ª—å–∫–æ –∂–∏—Ä–æ–≤ (–≥)?");
                } catch (NumberFormatException e) {
                    sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5");
                }
            }
            case FAT -> {
                try {
                    buffer.setFat(Double.parseDouble(text));
                    buffer.setCurrentStep(PartialMeal.InputStep.CARBS);
                    sendText(chatId, "–°–∫–æ–ª—å–∫–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥)?");
                } catch (NumberFormatException e) {
                    sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10.2");
                }
            }
            case CARBS -> {
                try {
                    buffer.setCarbs(Double.parseDouble(text));

                    if (buffer.getMealId() != null) {
                        // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        NutritionEntry updated = NutritionEntry.builder()
                                .id(buffer.getMealId())
                                .user(user)
                                .mealType(buffer.getMealType())
                                .protein(buffer.getProtein())
                                .fat(buffer.getFat())
                                .carbs(buffer.getCarbs())
                                .timestamp(LocalDateTime.now())
                                .build();

                        nutritionService.updateMeal(updated);
                        sendText(chatId, "‚úÖ –ü—Ä–∏—ë–º –ø–∏—â–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!");
                    } else {
                        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
                        NutritionEntry entry = NutritionEntry.builder()
                                .user(user)
                                .mealType(buffer.getMealType())
                                .protein(buffer.getProtein())
                                .fat(buffer.getFat())
                                .carbs(buffer.getCarbs())
                                .timestamp(LocalDateTime.now())
                                .build();

                        nutritionService.addMeal(entry);
                        sendText(chatId, "üçΩ –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
                    }

                    mealBuffer.remove(chatId);
                } catch (NumberFormatException e) {
                    sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70.0");
                }
            }

        }
    }

    public void handleTodayMeals(Update update) {
        long chatId = update.getMessage().getChatId();
        User user = onboardingService.getUserByTelegramId(chatId);

        LocalDate today = LocalDate.now();
        List<NutritionEntry> meals = nutritionService.getMealsByDate(user.getId(), today);

        if (meals.isEmpty()) {
            sendText(chatId, "üçΩ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ.");
            return;
        }

        double totalProtein = 0;
        double totalFat = 0;
        double totalCarbs = 0;

        StringBuilder details = new StringBuilder("üçõ –ü—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n");

        for (NutritionEntry meal : meals) {
            totalProtein += meal.getProtein();
            totalFat += meal.getFat();
            totalCarbs += meal.getCarbs();

            details.append(String.format("‚Ä¢ [%d] %s –≤ %s (–ë: %.1f–≥, –ñ: %.1f–≥, –£: %.1f–≥)\n",
                    meal.getId(),
                    meal.getMealType(),
                    meal.getTimestamp().toLocalTime().withSecond(0).withNano(0),
                    meal.getProtein(), meal.getFat(), meal.getCarbs()));
        }

        details.append(String.format("\n–ò—Ç–æ–≥–æ: –ë: %.1f–≥, –ñ: %.1f–≥, –£: %.1f–≥", totalProtein, totalFat, totalCarbs));
        sendText(chatId, details.toString());
    }

    public void handleEditMeal(Update update, Long mealId) {
        long chatId = update.getMessage().getChatId();
        Optional<NutritionEntry> optionalEntry = nutritionService.getMealById(mealId);

        if (optionalEntry.isEmpty()) {
            sendText(chatId, "‚ùå –ü—Ä–∏—ë–º –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        NutritionEntry entry = optionalEntry.get();
        mealBuffer.put(chatId, new PartialMeal(entry));

        sendText(chatId, String.format("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏—ë–º [%d]. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (—Ç–µ–∫—É—â–∏–π: %s)",
                entry.getId(), entry.getMealType()));
    }

    public void handleDeleteMeal(Update update, Long mealId) {
        long chatId = update.getMessage().getChatId();
        Optional<NutritionEntry> optionalEntry = nutritionService.getMealById(mealId);

        if (optionalEntry.isEmpty()) {
            sendText(chatId, "‚ùå –ü—Ä–∏—ë–º –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        sendButtons(chatId, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏?",
                Map.of(
                        "‚úÖ –£–¥–∞–ª–∏—Ç—å", "CONFIRM_DEL_MEAL:" + mealId,
                        "‚ùå –û—Ç–º–µ–Ω–∞", "CANCEL_DEL_MEAL"
                ));
    }

    public void confirmDeleteMeal(long chatId, Long mealId) {
        Optional<NutritionEntry> optionalEntry = nutritionService.getMealById(mealId);

        if (optionalEntry.isEmpty()) {
            sendText(chatId, "‚ùå –ü—Ä–∏—ë–º –ø–∏—â–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        nutritionService.deleteMeal(mealId);
        sendText(chatId, "üóë –ü—Ä–∏—ë–º –ø–∏—â–∏ —É–¥–∞–ª—ë–Ω.");
    }


    public void handleWeekMeals(Update update) {
        long chatId = update.getMessage().getChatId();
        User user = onboardingService.getUserByTelegramId(chatId);

        LocalDate today = LocalDate.now();
        LocalDate weekStart = today.minusDays(6); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è

        List<NutritionEntry> meals = nutritionService.getMealsForWeek(user.getId(), weekStart);

        if (meals.isEmpty()) {
            sendText(chatId, "üçΩ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        Map<LocalDate, DailyTotal> dailyTotals = new TreeMap<>();

        for (NutritionEntry meal : meals) {
            LocalDate date = meal.getTimestamp().toLocalDate();
            dailyTotals.putIfAbsent(date, new DailyTotal());
            dailyTotals.get(date).add(meal);
        }

        StringBuilder message = new StringBuilder("üç± –ü—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n");

        for (Map.Entry<LocalDate, DailyTotal> entry : dailyTotals.entrySet()) {
            LocalDate date = entry.getKey();
            DailyTotal total = entry.getValue();
            message.append(String.format("%s: –ë: %.1f, –ñ: %.1f, –£: %.1f\n",
                    date, total.protein, total.fat, total.carbs));
        }

        sendText(chatId, message.toString());
    }



    @Getter
    private static class DailyTotal {
        private double protein = 0;
        private double fat = 0;
        private double carbs = 0;

        void add(NutritionEntry entry) {
            this.protein += entry.getProtein();
            this.fat += entry.getFat();
            this.carbs += entry.getCarbs();
        }
    }



    @RequiredArgsConstructor
    @Getter
    @Setter
    private static class PartialMeal {
        private String mealType;
        private Double protein;
        private Double fat;
        private Double carbs;
        private Long mealId;
        private InputStep currentStep = InputStep.TYPE;

        public PartialMeal(NutritionEntry entry) {
            this.mealId = entry.getId();
            this.mealType = entry.getMealType();
            this.protein = entry.getProtein();
            this.fat = entry.getFat();
            this.carbs = entry.getCarbs();
            this.currentStep = InputStep.TYPE;
        }


        enum InputStep {
            TYPE, PROTEIN, FAT, CARBS
        }
    }
}
